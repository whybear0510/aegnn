import torch

# device = 'cuda:0'
device = 'cpu'


# test_pos_all = torch.tensor([[6.5000e+01, 7.8000e+01, 0.0000e+00],
#         [6.9000e+01, 7.8000e+01, 0.0000e+00],
#         [4.5000e+01, 7.6000e+01, 0.0000e+00],
#         [7.0000e+01, 6.9000e+01, 5.0000e-12],
#         [1.0000e+02, 4.4000e+01, 1.0000e-11],
#         [2.7000e+01, 6.3000e+01, 1.4500e-10],
#         [1.5000e+01, 5.8000e+01, 1.7500e-10],
#         [1.0600e+02, 1.9000e+01, 1.9000e-10],
#         [1.0900e+02, 3.9000e+01, 6.6000e-10],
#         [1.0300e+02, 2.6000e+01, 7.0500e-10],
#         [1.0100e+02, 2.6000e+01, 7.0500e-10],
#         [1.0000e+02, 6.8000e+01, 1.0400e-09],
#         [1.0000e+02, 4.4000e+01, 1.0700e-09],
#         [1.0900e+02, 4.4000e+01, 1.0750e-09],
#         [8.2000e+01, 4.4000e+01, 1.0750e-09],
#         [2.6000e+01, 4.3000e+01, 1.0750e-09],
#         [4.7000e+01, 3.5000e+01, 1.0800e-09],
#         [3.9000e+01, 3.5000e+01, 1.0800e-09],
#         [9.7000e+01, 6.2000e+01, 1.0850e-09],
#         [9.4000e+01, 5.7000e+01, 1.4150e-09],
#         [1.0800e+02, 1.0000e+00, 1.7300e-09],
#         [9.6000e+01, 3.7000e+01, 1.8750e-09],
#         [9.9000e+01, 7.0000e+01, 1.9500e-09],
#         [1.0300e+02, 7.2000e+01, 2.0000e-09],
#         [1.0400e+02, 1.0000e+01, 2.0150e-09],
#         [1.0700e+02, 1.3000e+01, 2.0950e-09],
#         [1.0800e+02, 8.0000e+00, 2.1050e-09],
#         [8.5000e+01, 6.3000e+01, 2.1150e-09],
#         [1.0300e+02, 7.3000e+01, 2.3800e-09],
#         [9.9000e+01, 7.3000e+01, 2.3800e-09],
#         [1.0200e+02, 3.2000e+01, 2.4000e-09],
#         [9.5000e+01, 7.4000e+01, 2.4050e-09],
#         [1.0000e+01, 6.0000e+01, 2.5500e-09],
#         [4.3000e+01, 6.0000e+01, 2.5500e-09],
#         [9.8000e+01, 4.8000e+01, 2.5550e-09],
#         [8.4000e+01, 6.6000e+01, 2.5650e-09],
#         [8.4000e+01, 7.6000e+01, 2.5800e-09],
#         [9.2000e+01, 3.7000e+01, 2.5850e-09],
#         [8.1000e+01, 5.0000e+01, 3.3100e-09],
#         [7.0000e+01, 7.0000e+01, 3.3250e-09],
#         [1.0400e+02, 7.0000e+01, 3.3250e-09],
#         [1.0000e+00, 7.0000e+01, 3.3250e-09],
#         [9.6000e+01, 6.9000e+01, 3.3250e-09],
#         [1.0200e+02, 2.8000e+01, 3.3350e-09],
#         [1.0900e+02, 4.9000e+01, 3.3400e-09],
#         [9.8000e+01, 4.6000e+01, 3.6700e-09],
#         [3.7000e+01, 7.6000e+01, 3.6750e-09],
#         [7.4000e+01, 5.1000e+01, 3.8800e-09],
#         [1.1100e+02, 2.4000e+01, 4.1100e-09],
#         [1.0000e+02, 6.2000e+01, 4.3400e-09],
#         [6.4000e+01, 0.0000e+00, 4.3500e-09],
#         [9.4000e+01, 7.0000e+00, 4.7700e-09],
#         [7.3000e+01, 5.6000e+01, 4.7800e-09],
#         [5.5000e+01, 5.7000e+01, 4.7850e-09],
#         [1.0900e+02, 4.0000e+00, 4.7900e-09],
#         [1.0400e+02, 7.5000e+01, 4.8150e-09]], device=device)
test_pos_all = torch.tensor([
        [1.0200e+02, 3.2000e+01, 2.4000e+01],
        [9.5000e+01, 7.4000e+01, 2.4050e+01],
        [1.0000e+01, 6.0000e+01, 2.5500e+01],
        [4.3000e+01, 6.0000e+01, 2.5500e+01],
        [9.8000e+01, 4.8000e+01, 2.5550e+01],
        [8.4000e+01, 6.6000e+01, 2.5650e+01],
        [8.4000e+01, 7.6000e+01, 2.5800e+01],
        [9.2000e+01, 3.7000e+01, 2.5850e+01],
        [8.1000e+01, 5.0000e+01, 3.3100e+01],
        [7.0000e+01, 7.0000e+01, 3.3250e+01],
        [1.0400e+02, 7.0000e+01, 3.3250e+01],
        [1.0000e+00, 7.0000e+01, 3.3250e+01],
        [9.6000e+01, 6.9000e+01, 3.3250e+01],
        [1.0200e+02, 2.8000e+01, 3.3350e+01],
        [1.0900e+02, 4.9000e+01, 3.3400e+01],
        [9.8000e+01, 4.6000e+01, 3.6700e+01],
        [3.7000e+01, 7.6000e+01, 3.6750e+01],
        [7.4000e+01, 5.1000e+01, 3.8800e+01],
        [1.1100e+02, 2.4000e+01, 4.1100e+01],
        [1.0000e+02, 6.2000e+01, 4.3400e+01],
        [6.4000e+01, 0.0000e+00, 4.3500e+01],
        [9.4000e+01, 7.0000e+00, 4.7700e+01],
        [7.3000e+01, 5.6000e+01, 4.7800e+01],
        [5.5000e+01, 5.7000e+01, 4.7850e+01],
        [1.0900e+02, 4.0000e+00, 4.7900e+01],
        [1.0400e+02, 7.5000e+01, 4.8150e+01]], device=device)
test_pos_new = torch.tensor([[1.0400e+02, 7.5000e+01, 4.8150e+01]], device=device)



pos_diff_sqrt = (test_pos_all-test_pos_new).pow(2).sum(1).sqrt()
print(f'gnd_truth = \n{pos_diff_sqrt}')

test_node_dis = torch.cdist(test_pos_all, test_pos_new, p=2).T.squeeze()
print(f'result from torch.cdist() in device {device} = \n{test_node_dis}')
#! cuda:0 is wrong! cpu is right!!!

# pdist = torch.nn.PairwiseDistance(p=2)
# test_node_dis = pdist(test_pos_all, test_pos_new)
# print(test_node_dis)

atol = 1e-5
different = torch.allclose(test_node_dis, pos_diff_sqrt, atol=atol)
print(f'Same?:{different} within abstract tolerance {atol}')